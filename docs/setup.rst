=====
Setup
=====
Setting up the 4dn-cloud-infra repo
-----------------------------------

------------
Installation
------------

First, make sure pyenv_ is installed and configured. Then, create the virtual environment for this repo, and install
dependencies via poetry_.

.. _pyenv: https://github.com/pyenv/pyenv
.. _poetry: https://python-poetry.org/

::
    pyenv install 3.6.10
    # Builds or rebuilds the env, version found in `.python-version`
    pyenv exec python -m venv --clear infraenv
    . infraenv/bin/activate
    pip install --upgrade pip
    pip install --upgrade poetry
    poetry install

----------------------
Access To Test Account
----------------------

You can install them in ~/.aws_test . You can set up a credentials file:

::
    [default]
    aws_access_key_id = XXX
    aws_secret_access_key = XXX

a config file:

::
    [default]
    region = us-east-1

and a test_creds.sh file:

::
    export AWS_ACCESS_KEY_ID=XXX
    export AWS_SECRET_ACCESS_KEY=XXX
    export AWS_DEFAULT_REGION=us-east-1
    # only if you're using a forked tibanna repo
    export TIBANNA_REPO_NAME=4dn-dcic/tibanna  # (default: 4dn-dcic/tibanna)
    export TIBANNA_REPO_BRANCH=master  # (default: master)
    # contains default usergroup being used
    export TIBANNA_DEFAULT_STEP_FUNCTION_NAME=tibanna_unicorn_tibanna_unicorn_trial_02



-------------
Configuration
-------------

After things are installed, you'll need to fill out config info. In order to orchestrate, you must first write a
config.json file at repo top level - use the JSON structure below as a template.

* You'll need to remove the comments because, unlike Python, `.json` dictionary files have no comment syntax.
* Note that you DO NOT and SHOULD NOT put AWS Keys in this file!

::
    {
        "account_number": <your account number, found in the console>,
        "identity": name of AWS Secret containing application configuration

        "deploying_iam_user": <your IAM user name, not the full ARN>,
        "rds.instance_size": "db.t3.xlarge",
        "rds.storage_size": 20,
        "rds.db_name": "ebdb",
        "rds.az": "us-east-1a",
        "elasticsearch.master_node_count": 3,  # XXX: Not enabled currently
        "elasticsearch.master_node_type": "c5.large.elasticsearch",
        "elasticsearch.data_node_count": 2,  # current prod data node configuration
        "elasticsearch.data_node_type": "c5.2xlarge.elasticsearch",
        "elasticsearch.volume_size": 20,
        "ecs.wsgi.count": 8,  # use a smaller value for testing. perhaps 2 or 4
        "ecs.wsgi.cpu": "256",
        "ecs.wsgi.mem": "512",
        "ecs.indexer.count": 4,
        "ecs.indexer.cpu": "256",
        "ecs.indexer.mem": "512",
        "ecs.ingester.count": 1,
        "ecs.ingester.cpu": "512",
        "ecs.ingester.mem": "1024",
    }

To configure the CGAP infrastructure (post-orchestration), you need to modify a JSON secret in AWS SecretsManager,
identified by the stack prefix. At minimum, the values below must be present. These values will all have a placeholders
in the generated application configuration secret. Some values need to be retrieved from the administrator configuring
the system. Note that Auth0 configuration is NOT part of the setup at this time - it assumes an existing Auth0
application and that the orchestrating user has access. Comments seek to guide the user on where to find each value.

::
    # Required props for deployment
    deploying_iam_user = "the power IAM user who is orchestrating the infrastructure"
    Auth0Client = "Get from Auth0"
    Auth0Secret = "Get from Auth0"
    ENV_NAME = "desired env_name, for example: cgap-mastertest"
    ENCODED_BS_ENV = "same as above"
    ENCODED_DATA_SET = "specifies load_data behavior: one of 'prod', 'test'"
    ENCODED_ES_SERVER = "Get output from datastore stack, include port 443"
    ENCODED_VERSION = "Should get picked up from application version"
    ENCODED_FILES_BUCKET = Get output from datastore stack, for example application-cgap-mastertest-files
    ENCODED_WFOUT_BUCKET = name_of_wfout_bucket, for example application-cgap-mastertest-wfout
    ENCODED_BLOBS_BUCKET = name_of_blobs_bucket, for example application-cgap-mastertest-blobs,
    ENCODED_SYSTEM_BUCKET = name_of_system_bucket, for example application-cgap-mastertest-system
    ENCODED_METADATA_BUNDLE_BUCKET = name_of_metadata_bundle_bucket, for example application-cgap-mastertest-metadata-bundles
    LANG = "en_US.UTF-8"
    LC_ALL = "en_US.UTF-8"
    RDS_HOSTNAME = "Get from RDS Secret"
    RDS_DB_NAME = "Get from RDS Secret"
    RDS_PORT = "Get from RDS Secret"
    RDS_USERNAME = "Get from RDS Secrete"
    RDS_PASSWORD = "Get from RDS Secret"
    S3_ENCRYPT_KEY = "generated by Cloudformation in KMS"
    SENTRY_DSN = "add if you want Sentry"
    reCaptchaSecret = "for reCaptcha in production"

-------------
Tibanna Setup
-------------

Each tibanna command is wrapped on execution, so the environment vars required for the tibanna cli configuration are
sourced with the command's execution. This requires a `test_creds.sh` file in `~/.aws_test/test_creds.sh` by default.

This file can look like this, with IAM creds to the correct account filled in:

::
    export AWS_ACCESS_KEY_ID=<ACCESS_KEY_HERE>
    export AWS_SECRET_ACCESS_KEY=<SECRET_HERE>
    export AWS_DEFAULT_REGION=us-east-1
    # only if you're using a forked tibanna repo
    export TIBANNA_REPO_NAME=4dn-dcic/tibanna  # (default: 4dn-dcic/tibanna)
    export TIBANNA_REPO_BRANCH=master  # (default: master)
    # contains default usergroup being used
    export TIBANNA_DEFAULT_STEP_FUNCTION_NAME=tibanna_unicorn_tibanna_unicorn_trial_02

To view the tibanna commands, use: `poetry run cli tibanna --help`

To view the tibanna cli help message itself, use: `poetry run cli tibanna help`

For more information on tibanna itself, see: https://tibanna.readthedocs.io/en/latest/
